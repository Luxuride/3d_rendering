name: Rust Rendering App Checks and Build

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain (rustfmt)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt
      - name: Cargo fmt check
        run: cargo fmt --check

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v2
      - name: Install Rust toolchain (clippy)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy
      - name: Clippy check
        run: cargo clippy -- -D warnings

  build-linux:
    runs-on: ubuntu-latest
    needs: [fmt, clippy]
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v2
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Build project (Linux)
        run: cargo build --release
      - name: Upload Linux Binary
        uses: actions/upload-artifact@v4
        with:
          name: rendering-linux-binary
          path: target/release/rendering

  build-windows:
    runs-on: windows-latest
    needs: [fmt, clippy]
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v2
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Build project (Windows)
        run: cargo build --release
      - name: Upload Windows Binary
        uses: actions/upload-artifact@v4
        with:
          name: rendering-windows-binary
          path: target/release/rendering.exe

  build-macos:
    runs-on: macos-latest
    needs: [fmt, clippy]
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v2
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Build project (macOS)
        run: cargo build --release
      - name: Upload macOS Binary
        uses: actions/upload-artifact@v4
        with:
          name: rendering-macos-binary
          path: target/release/rendering

  build-appimage:
    runs-on: ubuntu-latest
    needs: [build-linux]
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: rendering-linux-binary
      - name: Build and package AppImage
        uses: AppImageCrafters/build-appimage@master
        with:
          recipe: "./.github/appimage/AppImageBuilder.yml"
      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: rendering-linux-appimage
          path: "*.AppImage"

  release:
    name: release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos, build-appimage]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download Linux Binary
        uses: actions/download-artifact@v4
        with:
          name: rendering-linux-binary
          path: ./artifacts/linux
      - name: Download Windows Binary
        uses: actions/download-artifact@v4
        with:
          name: rendering-windows-binary
          path: ./artifacts/windows
      - name: Download macOS Binary
        uses: actions/download-artifact@v4
        with:
          name: rendering-macos-binary
          path: ./artifacts/macos
      - name: Download AppImage
        uses: actions/download-artifact@v4
        with:
          name: rendering-linux-appimage
          path: ./artifacts/appimage
      - name: Rename artifacts for unique release asset names
        run: |
          mkdir ./release
          mv ./artifacts/linux/rendering ./release/rendering-linux
          mv ./artifacts/macos/rendering ./release/rendering-macos
          mv ./artifacts/windows/rendering.exe ./release/rendering-windows.exe
          mv ./artifacts/appimage/rendering-0.1.0-x86_64.AppImage ./release/rendering-linux.AppImage
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release/*
